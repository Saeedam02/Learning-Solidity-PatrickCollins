Lesson 7 : Foundry Fund Me

You can use "forge test" command to run a test file in your terminal.
When you initialize your file by forge init, it creates counter.sol codes in directories. you should delete them, because we gana write our own code and tests.

////////
In Remix we can import libraries or codes by for example:

import {AggregatorV3Interface} from "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3

remix automatically reaches out to the npm package repository. however foundry doesn't do this.
we need to be very explicit and tell foundry exactly where we need to pull our dependencies from.
we actually need to download that repository from github

for the AggregatorV3Interface we can use: https://github.com/smartcontractkit/chainlink-brownie-contracts

for installing all libraries which we need, use: forge install smartcontractkit/chainlink-brownie-contracts@0.6.1 --no-commit
use @0.6.1 for the latest version 
After installing, it will gives us a path for where we're actually installing that.
But notice that we must tell foundry that @chainlink/contracts/ is refering to the lib folder. we need to create something called remapping.
go to foundry.toml and create new section called remaooing.

after doing all stuff, use forge build to compile. and there will be an out folder containing all compiled stuff.

**********
// the best way to named an error is starting with the name of the contract which is contains the error.
error FundMe_NtOwner();
**********

################################ Test #############################
the forge standard librarie has a couple of standard packages or standard contracts that we can use to make our test easier.

from a test, we want to test that our contract is doing what we wnat to do or not.

In all our tests, the first function is a setUp function and inside of that we're gana deploy our contract.

Another way to test and debugging is something called console.log -> https://book.getfoundry.sh/reference/forge-std/console-log

With command "forge test --vv" (vv stands for the visibility of logging in this test.)


////////////// Advace deploy script 1 /////////////
 Remember, in order to run a script, we are going to create run function.
vm keyword in run function is related to is script in the nameing the function

**** the command for running a script:  forge script script/DeployFundMe.s.sol


////////////// Forked Tests ///////////////////////
one of the most important part of our fundme contract is checking that is the funding works or not by checking out the getConversionRate()
for that purpose we need to check that we're able to getVersion() from our AggregatorV3 or not.

now test that if our priceFeed integrations are working or not.

*******
 if we want to run just a single test function, we can use :
 forge test -m name_of_the_func


!!!!!!!!!!!!!!!!!!!!!!!! 
when we don't give a RPC_URL into test:
remember when we run tests in foundry, when we don't specify a chain, foundry automatically spin up to anvil chain.
and we making a call to contract address that doesn't exist. so obviously we're going to get an error.
!!!!!!!!!!!!!!!!!!!!!!!!
for solving this problem, we are going to talk about types of tests:

1)Unit : Testing a specific part of our code

2) Integration : Testing hoe our code works with other part of our code

3) Forked : Testing our code on a simulated real environment 

4) Staging : Testing our code in a real environment that is not prod.

how to test our contract on an actual network?
firstly create a " .env" file and put the network_RPC_URL in that then use:
forge test -m testPriceFeedVersionIsAccurate --vvv --fork-url @network_RPS_URL 

the downside of the doing this forks is you're going to make a lots of API calls to Alchemy nodes and it will run up your bll.

so write test as many as you can without forking.

//////////// 
you can use the following command to see that how many lines of your code is tested.
forge coverage --fork-url @network_RPC_URL
////////////

what we really want to do is we want to make our test such that whenever we deploy our contracts we deploy them is a way that's modular with addresss or external system.
// modular deployments
//modular Testing



